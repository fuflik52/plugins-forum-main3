/**
 * üóÑÔ∏è Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
 */

import { createClient, SupabaseClient } from '@supabase/supabase-js';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface Plugin {
  id: string;
  name: string;
  description: string | null;
  size: number;
  author: string | null;
  version: string | null;
  github_url: string | null;
  download_url: string | null;
  tags: string[];
  category: string | null;
  language: string | null;
  stars: number;
  forks: number;
  last_updated: string;
  created_at: string;
  updated_at: string;
  is_active: boolean;
  download_count: number;
  rating: number;
  metadata: Record<string, unknown>;
}

export interface PluginPublic {
  id: string;
  name: string;
  description: string | null;
  size: number;
  author: string | null;
  version: string | null;
  github_url: string | null;
  download_url: string | null;
  tags: string[];
  category: string | null;
  language: string | null;
  stars: number;
  forks: number;
  last_updated: string;
  created_at: string;
  download_count: number;
  rating: number;
}

export interface PluginStats {
  total_plugins: number;
  active_plugins: number;
  total_categories: number;
  total_languages: number;
  avg_stars: number;
  last_update: string;
}

export interface SearchResult extends PluginPublic {
  rank: number;
}

export interface SearchParams {
  searchTerm?: string;
  category?: string;
  language?: string;
  limit?: number;
  offset?: number;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY –≤ .env —Ñ–∞–π–ª–µ');
}

class SupabaseService {
  private supabase: SupabaseClient | null = null;
  private isAvailable = false;

  // –ü—É–±–ª–∏—á–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase –∫–ª–∏–µ–Ω—Ç—É
  public getClient(): SupabaseClient | null {
    return this.supabase;
  }

  constructor() {
    this.initializeSupabase();
  }

  private initializeSupabase() {
    try {
      if (supabaseUrl && supabaseAnonKey) {
        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
        this.isAvailable = true;
        console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
      this.isAvailable = false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
   */
  public isSupabaseAvailable(): boolean {
    return this.isAvailable && this.supabase !== null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getPlugins(limit = 50, offset = 0): Promise<PluginPublic[]> {
    if (!this.isSupabaseAvailable()) {
      console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .order('stars', { ascending: false })
        .order('last_updated', { ascending: false })
        .range(offset, offset + limit - 1);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
   */
  async searchPlugins(params: SearchParams): Promise<SearchResult[]> {
    if (!this.isSupabaseAvailable()) {
      console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .rpc('search_plugins', {
          search_term: params.searchTerm || '',
          category_filter: params.category || null,
          language_filter: params.language || null,
          limit_count: params.limit || 50,
          offset_count: params.offset || 0
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –ø–æ ID
   */
  async getPluginById(id: string): Promise<PluginPublic | null> {
    if (!this.isSupabaseAvailable()) {
      return null;
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  async getPluginByName(name: string): Promise<PluginPublic | null> {
    if (!this.isSupabaseAvailable()) {
      return null;
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .eq('name', name)
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
   */
  async getPluginStats(): Promise<PluginStats | null> {
    if (!this.isSupabaseAvailable()) {
      return null;
    }

    try {
      const { data, error } = await this.supabase!
        .rpc('get_plugins_stats');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
      }

      return data?.[0] || null;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getCategories(): Promise<string[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('category')
        .not('category', 'is', null);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        return [];
      }

      const categories = [...new Set(data?.map((item: { category: string }) => item.category).filter(Boolean))] as string[];
      return categories.sort();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getLanguages(): Promise<string[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('language')
        .not('language', 'is', null);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:', error);
        return [];
      }

      const languages = [...new Set(data?.map((item: { language: string }) => item.language).filter(Boolean))] as string[];
      return languages.sort();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
   */
  async incrementDownloadCount(pluginId: string): Promise<boolean> {
    if (!this.isSupabaseAvailable()) {
      return false;
    }

    try {
      const { error } = await this.supabase!
        .rpc('increment_download_count', { plugin_id: pluginId });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫:', error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
   */
  async getPopularPlugins(limit = 10): Promise<PluginPublic[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .order('stars', { ascending: false })
        .order('download_count', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
   */
  async getRecentlyUpdatedPlugins(limit = 10): Promise<PluginPublic[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .order('last_updated', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getPluginsByCategory(category: string, limit = 20): Promise<PluginPublic[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .eq('category', category)
        .order('stars', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getPluginsByLanguage(language: string, limit = 20): Promise<PluginPublic[]> {
    if (!this.isSupabaseAvailable()) {
      return [];
    }

    try {
      const { data, error } = await this.supabase!
        .from('plugins_public')
        .select('*')
        .eq('language', language)
        .order('stars', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ —è–∑—ã–∫—É:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ —è–∑—ã–∫—É:', error);
      return [];
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const supabaseService = new SupabaseService();
export default supabaseService;