import type { IndexedPlugin } from '../types/plugin';

// –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Hugging Face Inference API –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ API –∫–ª—é—á–∞—Ö
export class AIService {
  private static readonly HF_API_URL = 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium';
  private static readonly BACKUP_API_URL = 'https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill';
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ AI
   * @param plugin - –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞
   * @returns Promise —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
   */
  static async generatePluginDescription(plugin: IndexedPlugin): Promise<string> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
      const isAvailable = await this.checkServiceAvailability();
      
      if (isAvailable) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞
        const context = this.buildPluginContext(plugin);
        
        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        let description = await this.callHuggingFaceAPI(context, this.HF_API_URL);
        
        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        if (!description) {
          description = await this.callHuggingFaceAPI(context, this.BACKUP_API_URL);
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç AI, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if (description) {
          return this.formatDescription(description, plugin);
        }
      }
      
      // –ï—Å–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      return this.generateFallbackDescription(plugin);
    } catch (error) {
      console.warn('AI Service error:', error);
      return this.generateFallbackDescription(plugin);
    }
  }
  
  /**
   * –°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞
   */
  private static buildPluginContext(plugin: IndexedPlugin): string {
    const parts = [];
    
    if (plugin.plugin_name) {
      parts.push(`Plugin name: ${plugin.plugin_name}`);
    }
    
    if (plugin.plugin_description) {
      parts.push(`Description: ${plugin.plugin_description}`);
    }
    
    if (plugin.plugin_author) {
      parts.push(`Author: ${plugin.plugin_author}`);
    }
    
    if (plugin.repository?.description) {
      parts.push(`Repository: ${plugin.repository.description}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if (plugin.file?.path) {
      const fileName = plugin.file.path.split('/').pop() || '';
      parts.push(`File: ${fileName}`);
    }
    
    const context = parts.join('. ');
    return `Describe the functionality of this Rust/Oxide plugin: ${context}. What does this plugin do?`;
  }
  
  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç Hugging Face API
   */
  private static async callHuggingFaceAPI(prompt: string, apiUrl: string): Promise<string | null> {
    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: prompt,
          parameters: {
            max_length: 200,
            temperature: 0.7,
            do_sample: true,
            top_p: 0.9
          }
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      if (Array.isArray(data) && data[0]?.generated_text) {
        return data[0].generated_text;
      }
      
      if (data.generated_text) {
        return data.generated_text;
      }
      
      return null;
    } catch (error) {
      console.warn(`HuggingFace API call failed:`, error);
      return null;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (fallback)
   */
  private static generateFallbackDescription(plugin: IndexedPlugin): string {
    const features = [];
    const commands = [];
    const permissions = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    const name = (plugin.plugin_name || '').toLowerCase();
    const description = (plugin.plugin_description || '').toLowerCase();
    const repoDesc = (plugin.repository?.description || '').toLowerCase();
    const allText = `${name} ${description} ${repoDesc}`;
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (allText.includes('admin') || allText.includes('mod') || allText.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')) {
      features.push('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
      commands.push('/admin', '/mod', '/kick', '/ban');
      permissions.push('admintools.use', 'admintools.kick', 'admintools.ban');
    }
    
    // –ß–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (allText.includes('chat') || allText.includes('message') || allText.includes('—á–∞—Ç')) {
      features.push('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
      commands.push('/mute', '/unmute', '/clearchat');
      permissions.push('chat.mute', 'chat.admin');
    }
    
    // –≠–∫–æ–Ω–æ–º–∏–∫–∞
    if (allText.includes('economy') || allText.includes('money') || allText.includes('coin') || allText.includes('—ç–∫–æ–Ω–æ–º–∏–∫')) {
      features.push('—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É');
      commands.push('/balance', '/pay', '/shop');
      permissions.push('economy.use', 'economy.admin');
    }
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
    if (allText.includes('teleport') || allText.includes('tp') || allText.includes('—Ç–µ–ª–µ–ø–æ—Ä—Ç')) {
      features.push('—Å–∏—Å—Ç–µ–º—É —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏');
      commands.push('/tp', '/tpa', '/tpaccept', '/tpdeny');
      permissions.push('teleport.use', 'teleport.admin');
    }
    
    // –î–æ–º–∞ –∏ —Å–ø–∞–≤–Ω
    if (allText.includes('home') || allText.includes('spawn') || allText.includes('–¥–æ–º')) {
      features.push('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏ —Å–ø–∞–≤–Ω–∞ –∏ –¥–æ–º–∞–º–∏');
      commands.push('/home', '/sethome', '/spawn', '/setspawn');
      permissions.push('home.use', 'spawn.use');
    }
    
    // –ü—Ä–µ–¥–º–µ—Ç—ã –∏ –∫–∏—Ç—ã
    if (allText.includes('kit') || allText.includes('item') || allText.includes('–ø—Ä–µ–¥–º–µ—Ç')) {
      features.push('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ –Ω–∞–±–æ—Ä–∞–º–∏');
      commands.push('/kit', '/give', '/item');
      permissions.push('kit.use', 'item.give');
    }
    
    // –ö–ª–∞–Ω—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    if (allText.includes('clan') || allText.includes('team') || allText.includes('group') || allText.includes('–∫–ª–∞–Ω')) {
      features.push('—Å–∏—Å—Ç–µ–º—É –∫–ª–∞–Ω–æ–≤ –∏ –∫–æ–º–∞–Ω–¥');
      commands.push('/clan', '/team', '/invite', '/leave');
      permissions.push('clan.use', 'team.create');
    }
    
    // PvP –∏ —Ä–µ–π–¥—ã
    if (allText.includes('raid') || allText.includes('pvp') || allText.includes('–±–æ–π')) {
      features.push('PvP –∏ —Ä–µ–π–¥–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏');
      commands.push('/pvp', '/raid', '/war');
      permissions.push('pvp.use', 'raid.participate');
    }
    
    // –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
    if (allText.includes('build') || allText.includes('construct') || allText.includes('—Å—Ç—Ä–æ–∏—Ç')) {
      features.push('—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
      commands.push('/build', '/remove', '/undo');
      permissions.push('build.use', 'build.admin');
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å
    if (allText.includes('info') || allText.includes('help') || allText.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü')) {
      features.push('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
      commands.push('/info', '/help', '/rules');
      permissions.push('info.use');
    }
    
    // –ó–∞—â–∏—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if (allText.includes('protect') || allText.includes('security') || allText.includes('–∑–∞—â–∏—Ç')) {
      features.push('—Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏');
      commands.push('/protect', '/claim', '/unclaim');
      permissions.push('protect.use', 'protect.admin');
    }
    
    let result = `üîß **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–ª–∞–≥–∏–Ω–∞ ${plugin.plugin_name}:**\n\n`;
    
    if (features.length > 0) {
       result += `üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n${features.map(f => `‚Ä¢ ${f}`).join('\n')}\n\n`;
     }
     
     if (commands.length > 0) {
       result += `‚å®Ô∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n${commands.slice(0, 6).map(c => `‚Ä¢ \`${c}\``).join('\n')}\n\n`;
     }
     
     if (permissions.length > 0) {
       result += `üîê **–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:**\n${permissions.slice(0, 4).map(p => `‚Ä¢ \`${p}\``).join('\n')}\n\n`;
     }
     
     // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –≤–µ—Ä—Å–∏–∏
     result += `üë§ **–ê–≤—Ç–æ—Ä:** ${plugin.plugin_author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n`;
     result += `üì¶ **–í–µ—Ä—Å–∏—è:** ${plugin.plugin_version || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
     result += `üè∑Ô∏è **–Ø–∑—ã–∫:** ${plugin.language || 'C#'}`;
     
     return result;
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  private static formatDescription(description: string, plugin: IndexedPlugin): string {
    // –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    let cleaned = description.replace(/^.*?What does this plugin do\?\s*/i, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    cleaned = cleaned.trim();
    cleaned = cleaned.replace(/^["']|["']$/g, ''); // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    cleaned = cleaned.replace(/\s+/g, ' '); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (cleaned.length < 20 || !cleaned.includes('plugin')) {
      return this.generateFallbackDescription(plugin);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!cleaned.endsWith('.') && !cleaned.endsWith('!') && !cleaned.endsWith('?')) {
      cleaned += '.';
    }
    
    return cleaned;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  static async checkServiceAvailability(): Promise<boolean> {
    try {
      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 2000); // 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch(this.HF_API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ inputs: 'test' }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      // –°—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ 503 –∏–ª–∏ 401
      return response.status !== 503 && response.status !== 401;
    } catch {
      // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ (–≤–∫–ª—é—á–∞—è —Ç–∞–π–º–∞—É—Ç) —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
      return false;
    }
  }
}