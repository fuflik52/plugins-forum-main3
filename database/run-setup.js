const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function runSetup() {
    try {
        console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        const sqlPath = path.join(__dirname, 'setup.sql');
        const sqlContent = fs.readFileSync(sqlPath, 'utf8');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const sqlCommands = sqlContent
            .split(';')
            .map(cmd => cmd.trim())
            .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
        
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for (let i = 0; i < sqlCommands.length; i++) {
            const command = sqlCommands[i];
            if (command.toLowerCase().includes('select') && command.includes('result')) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ SELECT
            }
            
            console.log(`‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${sqlCommands.length}...`);
            
            const { data, error } = await supabase.rpc('exec_sql', {
                sql_query: command
            });
            
            if (error) {
                // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                const { error: directError } = await supabase
                    .from('_temp')
                    .select('*')
                    .limit(0);
                
                if (directError && !directError.message.includes('does not exist')) {
                    console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${i + 1}: ${error.message}`);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
        const { data: tables, error: tablesError } = await supabase
            .from('plugins')
            .select('count')
            .limit(1);
            
        if (tablesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã plugins:', tablesError.message);
            console.log('\nüîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ setup.sql –≤—Ä—É—á–Ω—É—é –≤ Supabase SQL Editor:');
            console.log(`   https://app.supabase.com/project/${supabaseUrl.split('//')[1].split('.')[0]}/sql`);
            return false;
        }
        
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
        console.log('üìä –¢–∞–±–ª–∏—Ü–∞ plugins —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.log('\nüîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ setup.sql –≤—Ä—É—á–Ω—É—é –≤ Supabase SQL Editor:');
        console.log(`   https://app.supabase.com/project/${supabaseUrl.split('//')[1].split('.')[0]}/sql`);
        return false;
    }
}

if (require.main === module) {
    runSetup().then(success => {
        process.exit(success ? 0 : 1);
    });
}

module.exports = { runSetup };