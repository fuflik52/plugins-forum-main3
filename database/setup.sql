-- üóÑÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ SQL Editor –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã plugins
CREATE TABLE IF NOT EXISTS public.plugins (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    size BIGINT DEFAULT 0,
    author VARCHAR(255),
    version VARCHAR(50),
    github_url TEXT,
    download_url TEXT,
    tags TEXT[],
    category VARCHAR(100),
    language VARCHAR(50),
    stars INTEGER DEFAULT 0,
    forks INTEGER DEFAULT 0,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    download_count INTEGER DEFAULT 0,
    rating DECIMAL(3,2) DEFAULT 0.00,
    metadata JSONB DEFAULT '{}'
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_plugins_name ON public.plugins(name);
CREATE INDEX IF NOT EXISTS idx_plugins_category ON public.plugins(category);
CREATE INDEX IF NOT EXISTS idx_plugins_language ON public.plugins(language);
CREATE INDEX IF NOT EXISTS idx_plugins_stars ON public.plugins(stars DESC);
CREATE INDEX IF NOT EXISTS idx_plugins_updated ON public.plugins(last_updated DESC);
CREATE INDEX IF NOT EXISTS idx_plugins_active ON public.plugins(is_active);
CREATE INDEX IF NOT EXISTS idx_plugins_tags ON public.plugins USING GIN(tags);
CREATE INDEX IF NOT EXISTS idx_plugins_search ON public.plugins USING GIN(to_tsvector('english', name || ' ' || COALESCE(description, '')));

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
DROP TRIGGER IF EXISTS update_plugins_updated_at ON public.plugins;
CREATE TRIGGER update_plugins_updated_at
    BEFORE UPDATE ON public.plugins
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ JSON
CREATE OR REPLACE FUNCTION auto_populate_plugins(plugins_data JSONB)
RETURNS INTEGER AS $$
DECLARE
    plugin_record JSONB;
    inserted_count INTEGER := 0;
BEGIN
    -- –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–∞–≥–∏–Ω—É –≤ JSON –º–∞—Å—Å–∏–≤–µ
    FOR plugin_record IN SELECT * FROM jsonb_array_elements(plugins_data)
    LOOP
        -- –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω
        INSERT INTO public.plugins (
            name,
            description,
            size,
            author,
            version,
            github_url,
            download_url,
            tags,
            category,
            language,
            stars,
            forks,
            metadata
        ) VALUES (
            plugin_record->>'name',
            plugin_record->>'description',
            COALESCE((plugin_record->>'size')::BIGINT, 0),
            plugin_record->>'author',
            plugin_record->>'version',
            plugin_record->>'github_url',
            plugin_record->>'download_url',
            CASE 
                WHEN plugin_record->'tags' IS NOT NULL 
                THEN ARRAY(SELECT jsonb_array_elements_text(plugin_record->'tags'))
                ELSE ARRAY[]::TEXT[]
            END,
            plugin_record->>'category',
            plugin_record->>'language',
            COALESCE((plugin_record->>'stars')::INTEGER, 0),
            COALESCE((plugin_record->>'forks')::INTEGER, 0),
            plugin_record
        )
        ON CONFLICT (name) 
        DO UPDATE SET
            description = EXCLUDED.description,
            size = EXCLUDED.size,
            author = EXCLUDED.author,
            version = EXCLUDED.version,
            github_url = EXCLUDED.github_url,
            download_url = EXCLUDED.download_url,
            tags = EXCLUDED.tags,
            category = EXCLUDED.category,
            language = EXCLUDED.language,
            stars = EXCLUDED.stars,
            forks = EXCLUDED.forks,
            metadata = EXCLUDED.metadata,
            updated_at = NOW();
        
        inserted_count := inserted_count + 1;
    END LOOP;
    
    RETURN inserted_count;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
CREATE OR REPLACE FUNCTION get_plugins_stats()
RETURNS TABLE(
    total_plugins INTEGER,
    active_plugins INTEGER,
    total_categories INTEGER,
    total_languages INTEGER,
    avg_stars DECIMAL,
    last_update TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*)::INTEGER as total_plugins,
        COUNT(*) FILTER (WHERE is_active = true)::INTEGER as active_plugins,
        COUNT(DISTINCT category)::INTEGER as total_categories,
        COUNT(DISTINCT language)::INTEGER as total_languages,
        ROUND(AVG(stars), 2) as avg_stars,
        MAX(updated_at) as last_update
    FROM public.plugins;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
CREATE OR REPLACE FUNCTION search_plugins(
    search_term TEXT DEFAULT '',
    category_filter TEXT DEFAULT NULL,
    language_filter TEXT DEFAULT NULL,
    limit_count INTEGER DEFAULT 50,
    offset_count INTEGER DEFAULT 0
)
RETURNS TABLE(
    id UUID,
    name VARCHAR,
    description TEXT,
    author VARCHAR,
    category VARCHAR,
    language VARCHAR,
    stars INTEGER,
    last_updated TIMESTAMP WITH TIME ZONE,
    rank REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.id,
        p.name,
        p.description,
        p.author,
        p.category,
        p.language,
        p.stars,
        p.last_updated,
        ts_rank(to_tsvector('english', p.name || ' ' || COALESCE(p.description, '')), plainto_tsquery('english', search_term)) as rank
    FROM public.plugins p
    WHERE 
        p.is_active = true
        AND (search_term = '' OR to_tsvector('english', p.name || ' ' || COALESCE(p.description, '')) @@ plainto_tsquery('english', search_term))
        AND (category_filter IS NULL OR p.category = category_filter)
        AND (language_filter IS NULL OR p.language = language_filter)
    ORDER BY 
        CASE WHEN search_term = '' THEN p.stars ELSE NULL END DESC,
        CASE WHEN search_term != '' THEN ts_rank(to_tsvector('english', p.name || ' ' || COALESCE(p.description, '')), plainto_tsquery('english', search_term)) ELSE NULL END DESC,
        p.last_updated DESC
    LIMIT limit_count
    OFFSET offset_count;
END;
$$ LANGUAGE plpgsql;

-- –í–∫–ª—é—á–µ–Ω–∏–µ Row Level Security (RLS)
ALTER TABLE public.plugins ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–≤—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã)
CREATE POLICY "Allow public read access" ON public.plugins
    FOR SELECT USING (is_active = true);

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
CREATE POLICY "Allow authenticated insert" ON public.plugins
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
CREATE POLICY "Allow authenticated update" ON public.plugins
    FOR UPDATE USING (auth.role() = 'authenticated');

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
CREATE OR REPLACE VIEW public.plugins_public AS
SELECT 
    id,
    name,
    description,
    size,
    author,
    version,
    github_url,
    download_url,
    tags,
    category,
    language,
    stars,
    forks,
    last_updated,
    created_at,
    download_count,
    rating
FROM public.plugins
WHERE is_active = true;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
GRANT SELECT ON public.plugins_public TO anon;
GRANT SELECT ON public.plugins_public TO authenticated;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
CREATE OR REPLACE FUNCTION increment_download_count(plugin_id UUID)
RETURNS VOID AS $$
BEGIN
    UPDATE public.plugins 
    SET download_count = download_count + 1,
        updated_at = NOW()
    WHERE id = plugin_id AND is_active = true;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
GRANT EXECUTE ON FUNCTION increment_download_count(UUID) TO anon;
GRANT EXECUTE ON FUNCTION increment_download_count(UUID) TO authenticated;

-- –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
INSERT INTO public.plugins (name, description, author, category, language, stars, github_url) VALUES
('Example Plugin', '–ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏', 'TestAuthor', 'Utility', 'C#', 42, 'https://github.com/example/plugin')
ON CONFLICT (name) DO NOTHING;

-- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SELECT '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! –¢–∞–±–ª–∏—Ü–∞ plugins —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏, —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.' as result;

-- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
SELECT * FROM get_plugins_stats();