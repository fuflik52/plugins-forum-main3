#!/usr/bin/env node

/**
 * üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Supabase
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º SERVICE_ROLE_KEY –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS –ø–æ–ª–∏—Ç–∏–∫ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
const supabaseKey = supabaseServiceKey || supabaseAnonKey;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY (–∏–ª–∏ SUPABASE_ANON_KEY) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

if (!supabaseServiceKey) {
    console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: SUPABASE_SERVICE_ROLE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ANON_KEY, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ RLS.');
}

const supabase = createClient(supabaseUrl, supabaseKey);
console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${supabaseServiceKey ? 'SERVICE_ROLE_KEY' : 'ANON_KEY'} –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase`);

// –ü—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
const dataFiles = [
    '../backend/output/crawled_plugins.json',
    '../backend/output/oxide_plugins.json'
];

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞
 */
function normalizePlugin(plugin) {
    return {
        name: plugin.plugin_name || plugin.name || plugin.title || 'Unknown Plugin',
        description: plugin.plugin_description || plugin.description || plugin.summary || (plugin.repository ? plugin.repository.description : '') || '',
        size: parseInt(plugin.size) || 0,
        author: plugin.plugin_author || plugin.author || plugin.owner || (plugin.repository ? plugin.repository.owner_login : '') || 'Unknown',
        version: plugin.plugin_version || plugin.version || '1.0.0',
        github_url: plugin.github_url || plugin.url || (plugin.repository ? plugin.repository.html_url : '') || '',
        download_url: plugin.download_url || plugin.downloadUrl || (plugin.file ? plugin.file.raw_url : '') || '',
        tags: Array.isArray(plugin.tags) ? plugin.tags : (plugin.tags ? [plugin.tags] : []),
        category: plugin.category || plugin.type || 'Plugin',
        language: plugin.language || plugin.programmingLanguage || 'C#',
        stars: parseInt(plugin.stars) || parseInt(plugin.stargazers_count) || (plugin.repository ? parseInt(plugin.repository.stargazers_count) : 0) || 0,
        forks: parseInt(plugin.forks) || parseInt(plugin.forks_count) || (plugin.repository ? parseInt(plugin.repository.forks_count) : 0) || 0,
        metadata: {
            original_data: plugin,
            source_file: plugin._source_file || 'unknown',
            imported_at: new Date().toISOString()
        }
    };
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
 */
function loadPluginsFromFile(filePath) {
    try {
        const fullPath = path.resolve(__dirname, filePath);
        if (!fs.existsSync(fullPath)) {
            console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
            return [];
        }

        const data = fs.readFileSync(fullPath, 'utf8');
        const parsed = JSON.parse(data);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
        let plugins = [];
        if (Array.isArray(parsed)) {
            plugins = parsed;
        } else if (parsed.plugins && Array.isArray(parsed.plugins)) {
            plugins = parsed.plugins;
        } else if (parsed.data && Array.isArray(parsed.data)) {
            plugins = parsed.data;
        } else if (parsed.items && Array.isArray(parsed.items)) {
            plugins = parsed.items;
        } else {
            console.warn(`‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
            return [];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        plugins.forEach(plugin => {
            plugin._source_file = path.basename(filePath);
        });

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${plugins.length} –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ ${filePath}`);
        return plugins;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return [];
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞–º–∏
 */
async function uploadPluginsBatch(plugins, batchSize = 50) {
    const totalBatches = Math.ceil(plugins.length / batchSize);
    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < totalBatches; i++) {
        const start = i * batchSize;
        const end = Math.min(start + batchSize, plugins.length);
        const batch = plugins.slice(start, end);

        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${i + 1}/${totalBatches} (${batch.length} –ø–ª–∞–≥–∏–Ω–æ–≤)...`);

        try {
            const { data, error } = await supabase
                .from('plugins')
                .upsert(batch, { 
                    onConflict: 'name',
                    ignoreDuplicates: false 
                });

            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ ${i + 1}:`, error.message);
                errorCount += batch.length;
            } else {
                console.log(`‚úÖ –ü–∞–∫–µ—Ç ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
                successCount += batch.length;
            }
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ ${i + 1}:`, error.message);
            errorCount += batch.length;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    return { successCount, errorCount };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getDatabaseStats() {
    try {
        const { data, error } = await supabase
            .rpc('get_plugins_stats');

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return null;
        }

        return data[0];
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        return null;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...');
    console.log('=' .repeat(60));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    try {
        const { data, error } = await supabase
            .from('plugins')
            .select('count', { count: 'exact', head: true });
        
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
            console.log('   1. –í—ã–ø–æ–ª–Ω–µ–Ω SQL —Å–∫—Ä–∏–ø—Ç setup.sql –≤ Supabase');
            console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã SUPABASE_URL –∏ SUPABASE_ANON_KEY');
            console.log('   3. –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS');
            process.exit(1);
        }
        
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ (—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–≥–∏–Ω–æ–≤: ${data || 0})`);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        process.exit(1);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
    let allPlugins = [];
    for (const filePath of dataFiles) {
        const plugins = loadPluginsFromFile(filePath);
        allPlugins = allPlugins.concat(plugins);
    }

    if (allPlugins.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        process.exit(0);
    }

    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: ${allPlugins.length}`);

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const normalizedPlugins = allPlugins.map(normalizePlugin);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    const uniquePlugins = normalizedPlugins.reduce((acc, plugin) => {
        if (!acc.find(p => p.name === plugin.name)) {
            acc.push(plugin);
        }
        return acc;
    }, []);

    console.log(`üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${uniquePlugins.length}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const { successCount, errorCount } = await uploadPluginsBatch(uniquePlugins);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const stats = await getDatabaseStats();

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount} –ø–ª–∞–≥–∏–Ω–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ${errorCount} –ø–ª–∞–≥–∏–Ω–æ–≤`);
    
    if (stats) {
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
        console.log(`   –í—Å–µ–≥–æ –ø–ª–∞–≥–∏–Ω–æ–≤: ${stats.total_plugins}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤: ${stats.active_plugins}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.total_categories}`);
        console.log(`   –Ø–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${stats.total_languages}`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥: ${stats.avg_stars}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(stats.last_update).toLocaleString('ru-RU')}`);
    }

    console.log('\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫ Supabase API');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
        process.exit(1);
    });
}

module.exports = { normalizePlugin, loadPluginsFromFile, uploadPluginsBatch, getDatabaseStats };